// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agreement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_agreement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_agreement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_agreement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_agreement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_agreement_2eproto;
class agreement;
class agreementDefaultTypeInternal;
extern agreementDefaultTypeInternal _agreement_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::agreement* Arena::CreateMaybeMessage<::agreement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class agreement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agreement) */ {
 public:
  agreement();
  virtual ~agreement();

  agreement(const agreement& from);
  agreement(agreement&& from) noexcept
    : agreement() {
    *this = ::std::move(from);
  }

  inline agreement& operator=(const agreement& from) {
    CopyFrom(from);
    return *this;
  }
  inline agreement& operator=(agreement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const agreement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const agreement* internal_default_instance() {
    return reinterpret_cast<const agreement*>(
               &_agreement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(agreement& a, agreement& b) {
    a.Swap(&b);
  }
  inline void Swap(agreement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline agreement* New() const final {
    return CreateMaybeMessage<agreement>(nullptr);
  }

  agreement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<agreement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const agreement& from);
  void MergeFrom(const agreement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(agreement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agreement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_agreement_2eproto);
    return ::descriptor_table_agreement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kFlagFieldNumber = 5,
  };
  // double id = 1;
  void clear_id();
  double id() const;
  void set_id(double value);
  private:
  double _internal_id() const;
  void _internal_set_id(double value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // bool flag = 5;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agreement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double id_;
  double x_;
  double y_;
  double z_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_agreement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// agreement

// double id = 1;
inline void agreement::clear_id() {
  id_ = 0;
}
inline double agreement::_internal_id() const {
  return id_;
}
inline double agreement::id() const {
  // @@protoc_insertion_point(field_get:agreement.id)
  return _internal_id();
}
inline void agreement::_internal_set_id(double value) {
  
  id_ = value;
}
inline void agreement::set_id(double value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agreement.id)
}

// double x = 2;
inline void agreement::clear_x() {
  x_ = 0;
}
inline double agreement::_internal_x() const {
  return x_;
}
inline double agreement::x() const {
  // @@protoc_insertion_point(field_get:agreement.x)
  return _internal_x();
}
inline void agreement::_internal_set_x(double value) {
  
  x_ = value;
}
inline void agreement::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agreement.x)
}

// double y = 3;
inline void agreement::clear_y() {
  y_ = 0;
}
inline double agreement::_internal_y() const {
  return y_;
}
inline double agreement::y() const {
  // @@protoc_insertion_point(field_get:agreement.y)
  return _internal_y();
}
inline void agreement::_internal_set_y(double value) {
  
  y_ = value;
}
inline void agreement::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agreement.y)
}

// double z = 4;
inline void agreement::clear_z() {
  z_ = 0;
}
inline double agreement::_internal_z() const {
  return z_;
}
inline double agreement::z() const {
  // @@protoc_insertion_point(field_get:agreement.z)
  return _internal_z();
}
inline void agreement::_internal_set_z(double value) {
  
  z_ = value;
}
inline void agreement::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:agreement.z)
}

// bool flag = 5;
inline void agreement::clear_flag() {
  flag_ = false;
}
inline bool agreement::_internal_flag() const {
  return flag_;
}
inline bool agreement::flag() const {
  // @@protoc_insertion_point(field_get:agreement.flag)
  return _internal_flag();
}
inline void agreement::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void agreement::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:agreement.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_agreement_2eproto
